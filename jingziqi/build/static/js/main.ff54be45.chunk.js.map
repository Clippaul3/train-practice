{"version":3,"sources":["components/Square.jsx","components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","winnerClass","onClick","changePlayer","player","Board","backTo","e","i","target","document","querySelectorAll","forEach","btn","classList","remove","add","setState","state","winner","squares","history","step","Array","fill","winnerArr","bind","calculateWinner","getClassName","index","this","slice","push","length","lines","a","b","c","title","map","key","data-filter","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff54be45.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Square.css\";\r\n \r\nfunction Square(props) {\r\n  return (\r\n    <button className={`btn ${props.winnerClass}`} onClick={props.changePlayer}>\r\n        {props.player}\r\n    </button>\r\n  );\r\n}\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport \"../css/Board.css\";\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(9).fill(\"\"),\r\n      player: \"X\",\r\n      winner: \"\",\r\n      winnerArr: [],\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(\"\"),\r\n          player: \"X\",\r\n        },\r\n      ],\r\n      step: 1,\r\n    };\r\n\r\n    this.changePlayer = this.changePlayer.bind(this);\r\n    this.calculateWinner = this.calculateWinner.bind(this);\r\n    this.getClassName = this.getClassName.bind(this);\r\n  }\r\n\r\n  //更换棋手\r\n  changePlayer(index) {\r\n    if (this.state.winner) {\r\n      return;\r\n    }\r\n    let player = this.state.player === \"X\" ? \"O\" : \"X\";\r\n    let squares = [...this.state.squares];\r\n    if (squares[index]) {\r\n      return;\r\n    }\r\n    squares[index] = player;\r\n    let history = this.state.history.slice(0, this.state.step);\r\n    history.push({\r\n      squares,\r\n      player,\r\n    });\r\n    this.setState({\r\n      player,\r\n      squares,\r\n      history,\r\n      step: history.length,\r\n    });\r\n    let winner = this.calculateWinner(squares);\r\n    if (winner) {\r\n      this.setState({\r\n        winner: winner.squares,\r\n        winnerArr: winner.winnerArr,\r\n      });\r\n    }\r\n  }\r\n\r\n  //计算获胜旗子\r\n  calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return {\r\n          squares: squares[a],\r\n          winnerArr: lines[i],\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  //获胜棋子高亮\r\n  getClassName(index) {\r\n    let { winner, winnerArr } = this.state;\r\n    if (winner) {\r\n      for (let i = 0; i < 3; i++) {\r\n        if (winnerArr[i] === index) {\r\n          return \"winner-square\";\r\n        }\r\n      }\r\n      return \"\";\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  //悔棋\r\n  backTo = (e, i) => {\r\n    let { target } = e;\r\n    document.querySelectorAll(\".back_btn.active\").forEach((btn) => {\r\n      btn.classList.remove(\"active\");\r\n    });\r\n    target.classList.add(\"active\");\r\n    this.setState((state) => {\r\n      return {\r\n        winner: \"\",\r\n        squares: state.history[i].squares,\r\n        player: state.history[i].player,\r\n        step: i + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { player, squares, winner, history } = this.state;\r\n    let title = \"\";\r\n    if (!winner) {\r\n      title = <p>Next player: {player == \"X\" ? \"O\" : \"X\"}</p>;\r\n    } else {\r\n      title = <p>Winner is: {winner}</p>;\r\n    }\r\n    return (\r\n      <div className=\"flex\">\r\n        <div className=\"board\">\r\n          <h1>井字棋游戏--React</h1>\r\n          {title}\r\n          {squares.map((e, index) => {\r\n            return (\r\n              <Square\r\n                key={index}\r\n                player={e}\r\n                changePlayer={() => {\r\n                  this.changePlayer(index);\r\n                }}\r\n                winnerClass={this.getClassName(index)}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"back_step\">\r\n          <p>悔棋</p>\r\n          {history.map((e, i) => {\r\n            return (\r\n              <button\r\n                key={i}\r\n                onClick={(e) => {\r\n                  this.backTo(e, i);\r\n                }}\r\n                data-filter={\"number\" + i}\r\n                className=\"back_btn\"\r\n              >\r\n                {i === 0 ? \"Back to game start\" : \"Back to No:\" + i + \" step\"}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport Board from './components/Board'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}